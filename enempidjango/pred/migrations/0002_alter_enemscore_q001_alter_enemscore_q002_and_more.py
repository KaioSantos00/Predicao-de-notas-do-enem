# Generated by Django 4.2.1 on 2023-05-24 21:48

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pred', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='enemscore',
            name='Q001',
            field=models.IntegerField(choices=[(1, 'Nunca estudou'), (2, 'Não completou a 4ª série/5º ano do Ensino Fundamental'), (3, 'Completou a 4ª série/5º ano, mas não completou a 8ª série/9º ano do Ensino Fundamental'), (4, 'Completou a 8ª série/9º ano do Ensino Fundamental, mas não completou o Ensino Médio'), (5, 'Completou o Ensino Médio, mas não completou a Faculdade'), (6, 'Completou a Faculdade, mas não completou a Pós-graduação'), (7, 'Completou a Pós-graduação'), (8, 'Não sei')], max_length=300),
        ),
        migrations.AlterField(
            model_name='enemscore',
            name='Q002',
            field=models.IntegerField(choices=[(1, 'Nunca estudou'), (2, 'Não completou a 4ª série/5º ano do Ensino Fundamental'), (3, 'Completou a 4ª série/5º ano, mas não completou a 8ª série/9º ano do Ensino Fundamental'), (4, 'Completou a 8ª série/9º ano do Ensino Fundamental, mas não completou o Ensino Médio'), (5, 'Completou o Ensino Médio, mas não completou a Faculdade'), (6, 'Completou a Faculdade, mas não completou a Pós-graduação'), (7, 'Completou a Pós-graduação'), (8, 'Não sei')], max_length=300),
        ),
        migrations.AlterField(
            model_name='enemscore',
            name='Q003',
            field=models.IntegerField(choices=[(1, 'Lavrador, agricultor sem empregados, bóia fria, criador de animais (gado, porcos, galinhas, ovelhas, cavalos etc.), apicultor, pescador, lenhador, seringueiro, extrativista.'), (2, 'Diarista, empregado doméstico, cuidador de idosos, babá, cozinheiro (em casas particulares), motorista particular, jardineiro, faxineiro de empresas e prédios, vigilante, porteiro, carteiro, office-boy, vendedor, caixa, atendente de loja, auxiliar administrativo, recepcionista, servente de pedreiro, repositor de mercadoria.'), (3, 'Padeiro, cozinheiro industrial ou em restaurantes, sapateiro, costureiro, joalheiro, torneiro mecânico, operador de máquinas, soldador, operário de fábrica, trabalhador da mineração, pedreiro, pintor, eletricista, encanador, motorista, caminhoneiro, taxista.'), (4, 'Professor (de ensino fundamental ou médio, idioma, música, artes etc.), técnico (de enfermagem, contabilidade, eletrônica etc.), policial, militar de baixa patente (soldado, cabo, sargento), corretor de imóveis, supervisor, gerente, mestre de obras, pastor, microempresário (proprietário de empresa com menos de 10 empregados), pequeno comerciante, pequeno proprietário de terras, trabalhador autônomo ou por conta própria.'), (5, 'Médico, engenheiro, dentista, psicólogo, economista, advogado, juiz, promotor, defensor, delegado, tenente, capitão, coronel, professor universitário, diretor em empresas públicas ou privadas, político, proprietário de empresas com mais de 10 empregados.')], max_length=300),
        ),
        migrations.AlterField(
            model_name='enemscore',
            name='Q004',
            field=models.IntegerField(choices=[(1, 'Lavrador, agricultor sem empregados, bóia fria, criador de animais (gado, porcos, galinhas, ovelhas, cavalos etc.), apicultor, pescador, lenhador, seringueiro, extrativista.'), (2, 'Diarista, empregado doméstico, cuidador de idosos, babá, cozinheiro (em casas particulares), motorista particular, jardineiro, faxineiro de empresas e prédios, vigilante, porteiro, carteiro, office-boy, vendedor, caixa, atendente de loja, auxiliar administrativo, recepcionista, servente de pedreiro, repositor de mercadoria.'), (3, 'Padeiro, cozinheiro industrial ou em restaurantes, sapateiro, costureiro, joalheiro, torneiro mecânico, operador de máquinas, soldador, operário de fábrica, trabalhador da mineração, pedreiro, pintor, eletricista, encanador, motorista, caminhoneiro, taxista.'), (4, 'Professor (de ensino fundamental ou médio, idioma, música, artes etc.), técnico (de enfermagem, contabilidade, eletrônica etc.), policial, militar de baixa patente (soldado, cabo, sargento), corretor de imóveis, supervisor, gerente, mestre de obras, pastor, microempresário (proprietário de empresa com menos de 10 empregados), pequeno comerciante, pequeno proprietário de terras, trabalhador autônomo ou por conta própria.'), (5, 'Médico, engenheiro, dentista, psicólogo, economista, advogado, juiz, promotor, defensor, delegado, tenente, capitão, coronel, professor universitário, diretor em empresas públicas ou privadas, político, proprietário de empresas com mais de 10 empregados.')], max_length=300),
        ),
        migrations.AlterField(
            model_name='enemscore',
            name='Q006',
            field=models.IntegerField(choices=[(1, 'Nenhuma Renda'), (2, 'Até R$ 1.045,00'), (3, 'De R$ 1.045,01 até R$ 1.567,50'), (4, 'De R$ 1.567,51 até R$ 2.090,00'), (5, 'De R$ 2.090,01 até R$ 2.612,50'), (6, 'De R$ 2.612,51 até R$ 3.135,00'), (6, 'De R$ 3.135,01 até R$ 4.180,00'), (8, 'De R$ 4.180,01 até R$ 5.225,00'), (9, 'De R$ 5.225,01 até R$ 6.270,00'), (10, 'De R$ 6.270,01 até R$ 7.315,00'), (11, 'De R$ 7.315,01 até R$ 8.360,00'), (12, 'De R$ 8.360,01 até R$ 9.405,00'), (13, 'De R$ 9.405,01 até R$ 10.450,00'), (14, 'De R$ 10.450,01 até R$ 12.540,00'), (15, 'De R$ 12.540,01 até R$ 15.675,00'), (16, 'De R$ 15.675,01 até R$ 20.900,00'), (17, 'Acima de R$ 20.900,00')], max_length=30),
        ),
        migrations.AlterField(
            model_name='enemscore',
            name='Q012',
            field=models.IntegerField(choices=[(1, 'Não'), (2, 'Sim, uma.'), (3, 'Sim, duas.'), (4, 'Sim, três.'), (5, 'Sim, quatro ou mais.')], max_length=30),
        ),
        migrations.AlterField(
            model_name='enemscore',
            name='Q022',
            field=models.IntegerField(choices=[(1, 'Não.'), (2, 'Sim, um.'), (3, 'Sim, dois.'), (4, 'Sim, três.'), (5, 'Sim, quatro ou mais.')], max_length=30),
        ),
        migrations.AlterField(
            model_name='enemscore',
            name='TP_ANO_CONCLUIU',
            field=models.IntegerField(choices=[(0, 'Não informado'), (1, '2019'), (2, '2018'), (3, '2017'), (4, '2016'), (5, '2015'), (6, '2014'), (7, '2013'), (8, '2012'), (9, '2011'), (10, '2010'), (11, '2009'), (12, '2008'), (13, '2007'), (14, 'Antes de 2007')], max_length=300),
        ),
        migrations.AlterField(
            model_name='enemscore',
            name='TP_COR_RACA',
            field=models.IntegerField(choices=[(0, 'Não declarado'), (1, 'Branca'), (2, 'Preta'), (3, 'Parda'), (4, 'Amarela'), (5, 'Indígena')], max_length=20),
        ),
        migrations.AlterField(
            model_name='enemscore',
            name='TP_ENSINO',
            field=models.IntegerField(choices=[(1, 'Ensino Regular'), (2, 'Educação Especial - Modalidade Substitutiva'), (3, 'Educação de Jovens e Adultos')], max_length=300),
        ),
        migrations.AlterField(
            model_name='enemscore',
            name='TP_ESCOLA',
            field=models.IntegerField(choices=[(1, 'Não respondeu'), (2, 'Pública'), (3, 'Privada'), (4, 'Exterior')], max_length=20),
        ),
        migrations.AlterField(
            model_name='enemscore',
            name='TP_ESTADO_CIVIL',
            field=models.IntegerField(choices=[(1, 'Solteiro'), (2, 'Casado'), (3, 'Divorciado'), (4, 'Separado'), (5, 'Viuvo')], max_length=20),
        ),
        migrations.AlterField(
            model_name='enemscore',
            name='TP_FAIXA_ETARIA',
            field=models.IntegerField(choices=[(1, 'Menor de 17 anos'), (2, '17 anos'), (3, '18 anos'), (4, '19 anos'), (5, '20 anos'), (6, '21 anos'), (7, '22 anos'), (8, '23 anos'), (9, '24 anos'), (10, '25 anos'), (11, 'Entre 26 e 30 anos'), (12, 'Entre 31 e 35 anos'), (13, 'Entre 36 e 40 anos'), (14, 'Entre 41 e 45 anos'), (15, 'Entre 46 e 50 anos'), (16, 'Entre 51 e 55 anos'), (17, 'Entre 56 e 60 anos'), (18, 'Entre 61 e 65 anos'), (19, 'Entre 66 e 70 anos'), (20, 'Maior de 70 anos')], max_length=20),
        ),
        migrations.AlterField(
            model_name='enemscore',
            name='TP_LOCALIZACAO_ESC',
            field=models.IntegerField(choices=[(1, 'Urbana'), (2, 'Rural')], max_length=300),
        ),
    ]
